(()=>{fetch("https://api.coindesk.com/v1/bpi/currentprice.json").then((function(n){n.json().then((function(n){e(n)}))})).catch((function(e){document.getElementById("mainContainer").innerHTML+='<h1 class="heading">There was problem. Please try again later</h1>'}));var e=function(e){var t=document.getElementById("mainContainer"),r=new Date(e.time.updatedISO);for(var c in t.innerHTML+='<div class="updated">Last Updated '.concat(r.getDate()," ").concat(a(r.getMonth())," ").concat(r.getFullYear()," at ").concat(r.getHours(),":").concat(r.getMinutes(),"</div><br>"),e.bpi){var s=e.bpi[c];t.innerHTML+='\n            <div class="exchangeRate">\n                <div class="symbol">'.concat(n(s.code.toUpperCase()),'</div>\n                <div class="rateContainer">\n                    <h2 class="description">').concat(s.description,'</h2>\n                    <h2 class="value">').concat(s.symbol).concat(s.rate_float.toFixed(2),"</h2>\n                </div>\n            </div>")}},n=function(e){switch(e){case"USD":return'<i class="fa-solid fa-dollar-sign"></i>';case"EUR":return'<i class="fa-solid fa-euro-sign"></i>';case"GBP":return'<i class="fa-solid fa-sterling-sign"></i>';default:return'<i class="fa-solid fa-coins"></i>'}},a=function(e){switch(e){case 1:return"January";case 2:return"February";case 3:return"March";case 4:return"April";case 5:return"May";case 6:return"June";case 7:return"July";case 8:return"August";case 9:return"September";case 10:return"October";case 11:return"November";case 12:return"December"}}})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYnVuZGxlLmpzIiwibWFwcGluZ3MiOiJNQUFBQSxNQUFNLHFEQUNEQyxNQUFLLFNBQUNDLEdBQ0hBLEVBQVNDLE9BQU9GLE1BQUssU0FBQUUsR0FDakJDLEVBQWFELEVBQ2pCLEdBQ0osSUFDQ0UsT0FBTSxTQUFBQyxHQUNIQyxTQUFTQyxlQUFlLGlCQUFpQkMsV0FBYSxvRUFDMUQsSUFPSixJQUFJTCxFQUFlLFNBQUNNLEdBQ2hCLElBQU1DLEVBQWdCSixTQUFTQyxlQUFlLGlCQUN4Q0ksRUFBTyxJQUFJQyxLQUFLSCxFQUFXLEtBQUVJLFlBR25DLElBQUssSUFBSUMsS0FGVEosRUFBY0YsV0FBYSw0Q0FBcUNHLEVBQUtJLFVBQVMsWUFBSUMsRUFBaUJMLEVBQUtNLFlBQVcsWUFBSU4sRUFBS08sY0FBYSxlQUFPUCxFQUFLUSxXQUFVLFlBQUlSLEVBQUtTLGFBQVksY0FFbEtYLEVBQVUsSUFBRyxDQUMzQixJQUFJWSxFQUFPWixFQUFVLElBQUVLLEdBQ3ZCSixFQUFjRixXQUFhLHdGQUVHYyxFQUFRRCxFQUFLRSxLQUFLQyxlQUFjLDRHQUV4QkgsRUFBS0ksWUFBVyx3REFDdEJKLEVBQUtLLFFBQU0sT0FBR0wsRUFBS00sV0FBV0MsUUFBUSxHQUFFLG9ELENBSWhGLEVBT0lOLEVBQVUsU0FBQ0ksR0FDWCxPQUFRQSxHQUNKLElBQUssTUFDRCxNQUFPLDBDQUNYLElBQUssTUFDRCxNQUFPLHdDQUNYLElBQUssTUFDRCxNQUFPLDRDQUNYLFFBQ0ksTUFBTyxvQ0FFbkIsRUFPSVYsRUFBbUIsU0FBQ2EsR0FDcEIsT0FBUUEsR0FDSixLQUFLLEVBQ0QsTUFBTyxVQUNYLEtBQUssRUFDRCxNQUFPLFdBQ1gsS0FBSyxFQUNELE1BQU8sUUFDWCxLQUFLLEVBQ0QsTUFBTyxRQUNYLEtBQUssRUFDRCxNQUFPLE1BQ1gsS0FBSyxFQUNELE1BQU8sT0FDWCxLQUFLLEVBQ0QsTUFBTyxPQUNYLEtBQUssRUFDRCxNQUFPLFNBQ1gsS0FBSyxFQUNELE1BQU8sWUFFWCxLQUFLLEdBQ0QsTUFBTyxVQUVYLEtBQUssR0FDRCxNQUFPLFdBQ1gsS0FBSyxHQUNELE1BQU8sV0FFbkIsQyIsInNvdXJjZXMiOlsid2VicGFjazovL2Fzc2VzbWVudC0zLy4vc3JjL3NjcmlwdC50cyJdLCJzb3VyY2VzQ29udGVudCI6WyJmZXRjaCgnaHR0cHM6Ly9hcGkuY29pbmRlc2suY29tL3YxL2JwaS9jdXJyZW50cHJpY2UuanNvbicpXHJcbiAgICAudGhlbigocmVzcG9uc2UpID0+IHtcclxuICAgICAgICByZXNwb25zZS5qc29uKCkudGhlbihqc29uID0+IHtcclxuICAgICAgICAgICAgcmVuZGVyUmVzdWx0KGpzb24pO1xyXG4gICAgICAgIH0pO1xyXG4gICAgfSlcclxuICAgIC5jYXRjaChlcnIgPT4ge1xyXG4gICAgICAgIGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKFwibWFpbkNvbnRhaW5lclwiKS5pbm5lckhUTUwgKz0gYDxoMSBjbGFzcz1cImhlYWRpbmdcIj5UaGVyZSB3YXMgcHJvYmxlbS4gUGxlYXNlIHRyeSBhZ2FpbiBsYXRlcjwvaDE+YFxyXG4gICAgfSlcclxuXHJcbi8qKlxyXG4gKiByZW5kZXJSZXN1bHQgZnVuY3Rpb24gd2hpY2ggb3V0cHV0cyBkYXRhIHJlY2VpdmVkIGZyb20gYXBpXHJcbiAqIHBhcmFtcyB7b2JqfSB0aGUgb2JqZWN0IHRoYXQgd2FzIHJldHVybmVkIGZyb20gdGhlIGFwaVxyXG4gKiBAcmV0dXJucyB2b2lkXHJcbiAqL1xyXG5sZXQgcmVuZGVyUmVzdWx0ID0gKGRhdGE6T2JqZWN0KTogdm9pZCA9PiB7XHJcbiAgICBjb25zdCBtYWluQ29udGFpbmVyID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoXCJtYWluQ29udGFpbmVyXCIpO1xyXG4gICAgY29uc3QgZGF0ZSA9IG5ldyBEYXRlKGRhdGFbXCJ0aW1lXCJdLnVwZGF0ZWRJU08pO1xyXG4gICAgbWFpbkNvbnRhaW5lci5pbm5lckhUTUwgKz0gYDxkaXYgY2xhc3M9XCJ1cGRhdGVkXCI+TGFzdCBVcGRhdGVkICR7ZGF0ZS5nZXREYXRlKCl9ICR7Z2V0Q2FsZW5kYXJNb250aChkYXRlLmdldE1vbnRoKCkpfSAke2RhdGUuZ2V0RnVsbFllYXIoKX0gYXQgJHtkYXRlLmdldEhvdXJzKCl9OiR7ZGF0ZS5nZXRNaW51dGVzKCl9PC9kaXY+PGJyPmBcclxuXHJcbiAgICBmb3IgKGxldCBpbmRleCBpbiBkYXRhW1wiYnBpXCJdKSB7XHJcbiAgICAgICAgbGV0IGl0ZW0gPSBkYXRhW1wiYnBpXCJdW2luZGV4XTtcclxuICAgICAgICBtYWluQ29udGFpbmVyLmlubmVySFRNTCArPSBgXHJcbiAgICAgICAgICAgIDxkaXYgY2xhc3M9XCJleGNoYW5nZVJhdGVcIj5cclxuICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9XCJzeW1ib2xcIj4ke2dldEljb24oaXRlbS5jb2RlLnRvVXBwZXJDYXNlKCkpfTwvZGl2PlxyXG4gICAgICAgICAgICAgICAgPGRpdiBjbGFzcz1cInJhdGVDb250YWluZXJcIj5cclxuICAgICAgICAgICAgICAgICAgICA8aDIgY2xhc3M9XCJkZXNjcmlwdGlvblwiPiR7aXRlbS5kZXNjcmlwdGlvbn08L2gyPlxyXG4gICAgICAgICAgICAgICAgICAgIDxoMiBjbGFzcz1cInZhbHVlXCI+JHtpdGVtLnN5bWJvbH0ke2l0ZW0ucmF0ZV9mbG9hdC50b0ZpeGVkKDIpfTwvaDI+XHJcbiAgICAgICAgICAgICAgICA8L2Rpdj5cclxuICAgICAgICAgICAgPC9kaXY+YDtcclxuICAgIH1cclxufVxyXG5cclxuLyoqXHJcbiAqIGdldEljb24gZnVuY3Rpb24gd2hpY2ggcmV0dXJucyB0aGUgaWNvbiBmb3IgYSBzeW1ib2wgcHJvdmlkZWRcclxuICogcGFyYW1zIHtzdHJpbmd9IHRoZSBzdHJpbmcgb2YgdGhlIHN5bWJvbFxyXG4gKiBAcmV0dXJucyBzdHJpbmdcclxuICovXHJcbmxldCBnZXRJY29uID0gKHN5bWJvbDogc3RyaW5nKTogc3RyaW5nID0+IHtcclxuICAgIHN3aXRjaCAoc3ltYm9sKSB7XHJcbiAgICAgICAgY2FzZSBcIlVTRFwiOlxyXG4gICAgICAgICAgICByZXR1cm4gYDxpIGNsYXNzPVwiZmEtc29saWQgZmEtZG9sbGFyLXNpZ25cIj48L2k+YDtcclxuICAgICAgICBjYXNlIFwiRVVSXCI6XHJcbiAgICAgICAgICAgIHJldHVybiBgPGkgY2xhc3M9XCJmYS1zb2xpZCBmYS1ldXJvLXNpZ25cIj48L2k+YDtcclxuICAgICAgICBjYXNlIFwiR0JQXCI6XHJcbiAgICAgICAgICAgIHJldHVybiBgPGkgY2xhc3M9XCJmYS1zb2xpZCBmYS1zdGVybGluZy1zaWduXCI+PC9pPmA7XHJcbiAgICAgICAgZGVmYXVsdDpcclxuICAgICAgICAgICAgcmV0dXJuIGA8aSBjbGFzcz1cImZhLXNvbGlkIGZhLWNvaW5zXCI+PC9pPmA7XHJcbiAgICB9XHJcbn1cclxuXHJcbi8qKlxyXG4gKiBnZXRDYWxlbmRhck1vbnRoIGZ1bmN0aW9uIHdoaWNoIHJldHVybnMgYSBzdHJpbmcgbW9udGhcclxuICogcGFyYW1zIHtudW1iZXJ9IHRoZSBudW1iZXIgb2YgdGhlIGNvcnJlc3BvbmRpbmcgbW9udGhcclxuICogQHJldHVybnMgc3RyaW5nXHJcbiAqL1xyXG5sZXQgZ2V0Q2FsZW5kYXJNb250aCA9IChtb250aDpudW1iZXIpOiBzdHJpbmcgPT4ge1xyXG4gICAgc3dpdGNoIChtb250aCkge1xyXG4gICAgICAgIGNhc2UgMTpcclxuICAgICAgICAgICAgcmV0dXJuIFwiSmFudWFyeVwiXHJcbiAgICAgICAgY2FzZSAyOlxyXG4gICAgICAgICAgICByZXR1cm4gXCJGZWJydWFyeVwiXHJcbiAgICAgICAgY2FzZSAzOlxyXG4gICAgICAgICAgICByZXR1cm4gXCJNYXJjaFwiXHJcbiAgICAgICAgY2FzZSA0OlxyXG4gICAgICAgICAgICByZXR1cm4gXCJBcHJpbFwiXHJcbiAgICAgICAgY2FzZSA1OlxyXG4gICAgICAgICAgICByZXR1cm4gXCJNYXlcIlxyXG4gICAgICAgIGNhc2UgNjpcclxuICAgICAgICAgICAgcmV0dXJuIFwiSnVuZVwiO1xyXG4gICAgICAgIGNhc2UgNzpcclxuICAgICAgICAgICAgcmV0dXJuIFwiSnVseVwiO1xyXG4gICAgICAgIGNhc2UgODpcclxuICAgICAgICAgICAgcmV0dXJuIFwiQXVndXN0XCI7XHJcbiAgICAgICAgY2FzZSA5OlxyXG4gICAgICAgICAgICByZXR1cm4gXCJTZXB0ZW1iZXJcIjtcclxuICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgY2FzZSAxMDpcclxuICAgICAgICAgICAgcmV0dXJuIFwiT2N0b2JlclwiO1xyXG4gICAgICAgICAgICBicmVhaztcclxuICAgICAgICBjYXNlIDExOlxyXG4gICAgICAgICAgICByZXR1cm4gXCJOb3ZlbWJlclwiO1xyXG4gICAgICAgIGNhc2UgMTI6XHJcbiAgICAgICAgICAgIHJldHVybiBcIkRlY2VtYmVyXCI7XHJcbiAgICB9XHJcbn1cclxuXHJcblxyXG5cclxuIl0sIm5hbWVzIjpbImZldGNoIiwidGhlbiIsInJlc3BvbnNlIiwianNvbiIsInJlbmRlclJlc3VsdCIsImNhdGNoIiwiZXJyIiwiZG9jdW1lbnQiLCJnZXRFbGVtZW50QnlJZCIsImlubmVySFRNTCIsImRhdGEiLCJtYWluQ29udGFpbmVyIiwiZGF0ZSIsIkRhdGUiLCJ1cGRhdGVkSVNPIiwiaW5kZXgiLCJnZXREYXRlIiwiZ2V0Q2FsZW5kYXJNb250aCIsImdldE1vbnRoIiwiZ2V0RnVsbFllYXIiLCJnZXRIb3VycyIsImdldE1pbnV0ZXMiLCJpdGVtIiwiZ2V0SWNvbiIsImNvZGUiLCJ0b1VwcGVyQ2FzZSIsImRlc2NyaXB0aW9uIiwic3ltYm9sIiwicmF0ZV9mbG9hdCIsInRvRml4ZWQiLCJtb250aCJdLCJzb3VyY2VSb290IjoiIn0=