(()=>{"use strict";var e=function(e,t,a,n){var o=this;this.gameDuration=e,this.breakDuration=t,this.numberPlayers=a,this.amountBreaks=n,this.getGameDuration=function(){return o.gameDuration},this.getBreakDuration=function(){return o.breakDuration},this.getNumberPlayers=function(){return o.numberPlayers},this.getAmountBreaks=function(){return o.amountBreaks},this.gameDuration=e,this.breakDuration=t,this.numberPlayers=a,this.amountBreaks=n},t=function(e,t,a){var n=this;this.id=e,this.abbreviation=t,this.logo=a,this.getAbbreviation=function(){return n.abbreviation},this.getId=function(){return n.id},this.getLogo=function(){return n.logo},this.id=e,this.abbreviation=t,this.logo=a},a=function(a,n,o,i,r,s,m){var c=this;this.getGoals=function(){return c.goals},this.getHomeTeam=function(){return c.homeTeam},this.getAwayTeam=function(){return c.awayTeam},this.getGameDuration=function(){return 2*c.sport.getGameDuration()+c.sport.getBreakDuration()},this.getBreakDuration=function(){return c.sport.getGameDuration()+c.sport.getBreakDuration()},this.createGame=function(){document.getElementById("gamesContainer").innerHTML+='\n        <div class="game" id="'.concat(c.gameId,'">\n            <h1 class="teamName">').concat(c.homeTeam.getAbbreviation()," vs ").concat(c.awayTeam.getAbbreviation(),'</h1>    \n            <img class="teamLogo" src="').concat(c.homeTeam.getLogo(),'">\n            <img class="teamLogo" src="').concat(c.awayTeam.getLogo(),'">\n            <div class="outer">\n                <div class="innerScoreBar"></div>\n                <div class="break"></div>\n                <div class="endGame"></div>\n            </div>\n        \n            <div class="scoreCard">\n                <div class="homeTeamScore">0</div>\n                <div class="dash">-</div>\n                <div class="awayTeamScore">0</div>\n            </div>\n        </div>')},this.startGame=function(){var e=document.getElementById(c.gameId).querySelector(" .innerScoreBar");e.style.animationName="playGame",e.style.animationDuration="".concat(c.getGameDuration(),"ms"),e.style.animationFillMode="forwards",e.style.animationTimingFunction="linear"},this.updateGame=function(e){e===c.getBreakDuration()?c.showHalfTime():e===c.getGameDuration()?c.showEndGame():c.goals.forEach((function(t,a){e>=t.videoMS&&(t.teamID===c.homeTeam.getId()?c.incHomeTeamScore(a):t.teamID===c.awayTeam.getId()&&c.incAwayTeamScore(a))}))},this.incHomeTeamScore=function(e){if(!c.goals[e].marked){var t=document.getElementById(c.gameId).querySelector(" .homeTeamScore"),a=parseInt(t.innerHTML)+1;t.innerHTML=a.toString(),c.goals[e].marked=!0}},this.incAwayTeamScore=function(e){if(!c.goals[e].marked){var t=document.getElementById(c.gameId).querySelector(" .awayTeamScore"),a=parseInt(t.innerHTML)+1;t.innerHTML=a.toString(),c.goals[e].marked=!0}},this.showHalfTime=function(){document.getElementById(c.gameId).querySelector(" .outer .break").style.display="block"},this.showEndGame=function(){document.getElementById(c.gameId).querySelector(" .outer .endGame").style.display="block"},this.awayTeam=new t(a,o,"./team-badges/"+o+".png"),this.homeTeam=new t(n,i,"./team-badges/"+i+".png"),this.sport=new e(s,m,11,1),this.goals=r,this.gameId="game"+Date.now().toString(36)+Math.random().toString(36).substring(2)},n=[];window.onload=function(){o(),window.startGames=r};var o=function(){fetch("./football-playout.json").then((function(e){e.json().then((function(e){e.data.forEach((function(t){n.push(new a(t.awayTeamID,t.homeTeamID,t.awayTeamAbbr,t.homeTeamAbbr,t.goals,e.config.msPerGamePeriod,e.config.break))})),i()}))}))},i=function(){for(var e=0;e<n.length;e++)n[e].createGame()},r=function(){for(var e=0,t=n[0].getGameDuration(),a=n[0].getBreakDuration(),o=0;o<n.length;o++)n[o].startGame();var i=setInterval((function(){e===a?e+=1e3:e===t?clearInterval(i):e+=1e3;for(var o=0;o<n.length;o++)n[o].updateGame(e)}),1e3)}})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,